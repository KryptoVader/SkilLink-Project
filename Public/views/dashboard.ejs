<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="referrer" content="no-referrer" />
    <title>SkillLink Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <script src="/socket.io/socket.io.js"></script>
    <style>
        :root {
            --primary: #2563eb;
            --dark: #1f2937;
            --hover-light: #e0f2fe;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .hidden {
            display: none;
        }

        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        .animate-spin {
            animation: spin 1s linear infinite;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .message-row.animate-slideIn {
            animation: slideIn 0.3s ease-out;
        }

        #friendSidebar,
        #channelSidebar {
            position: absolute;
            /* Makes the sidebar stack */
            top: 0;
            /* Align to the top */
            left: 0;
            /* Align to the left */
            width: 100%;
            /* Take full width of sidebar container */
            height: 100%;
            /* Full height of sidebar container */
            transition: opacity 0.3s ease, visibility 0.3s ease;
            /* Smooth transitions */
            z-index: 10;
            /* Default z-index */
            background-color: white;
            /* Ensure background hides other elements */
        }

        #friendSidebar.hidden,
        #channelSidebar.hidden {
            opacity: 0;
            /* Make the hidden sidebar transparent */
            visibility: hidden;
            /* Make it non-interactive */
            z-index: -1;
            /* Place it behind */
        }

        #friendSidebar {
            z-index: 20;
            /* Friend sidebar appears on top */
        }

        .group-item.selected {
            background-color: #2563eb;
            /* Blue background */
            border: 2px solid #1d4ed8;
            /* Darker blue border */
            transform: scale(1.1);
            /* Slightly larger */
        }

        .dropdown-item {
            transition: background-color 0.3s ease;
        }

        .dropdown-item:hover {
            background-color: #f9fafb; /* Subtle hover effect */
        }

        .dropdown-header {
            background-color: #f3f4f6; /* Light gray */
            font-weight: bold;
            padding: 8px 16px;
            border-bottom: 1px solid #e5e7eb; /* Border for separation */
        }
    </style>
</head>

<body class="bg-[#f3f4f6] text-gray-800">
    <nav id="topNavbar" class="fixed top-0 w-full bg-white py-4 shadow-md z-50">
        <div class="max-w-7xl mx-auto px-4 gap-5 flex justify-between items-center">                
                <a href="#" onclick="toggleRequestsDropdown(event)" class="relative">
                    <i class="fas fa-envelope text-xl text-[var(--primary)] hover:text-[var(--dark)]"></i>
                    <span id="notificationBadge" 
                        class="absolute bottom-4 left-3 bg-red-500 text-white text-xs font-bold rounded-full h-4 w-4 flex items-center justify-center hidden">
                        0
                    </span>
                </a>
                <ul id="requestsDropdown" class="absolute left-18 top-16 w-96 bg-white rounded-lg shadow-lg border border-gray-200 max-h-96 overflow-y-auto hidden">
                    <!-- Content dynamically updated via JavaScript -->
                </ul>
                <!-- Logo -->
                <div class="logo text-[var(--primary)] text-2xl font-bold">
                    <a href="/" class="text-decoration:none">SkillLink</a>
                </div>

                <!-- Search Bar -->
                <div class="search-bar flex-grow mx-4 relative">
                    <form action="/search" method="GET" class="relative flex items-center">
                        <div class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24"
                                fill="currentColor">
                                <path fill-rule="evenodd"
                                    d="M10 2a8 8 0 106.32 12.906l4.387 4.386a1 1 0 11-1.414 1.415l-4.387-4.386A8 8 0 0010 2zm0 2a6 6 0 100 12 6 6 0 000-12z"
                                    clip-rule="evenodd" />
                            </svg>
                        </div>
                        <input type="text" name="query" id="search-input" placeholder="Search..."
                            class="pl-10 px-3 py-1.5 border border-gray-300 rounded-full shadow-sm text-sm focus:outline-none focus:ring-2 focus:ring-[var(--primary)] focus:border-[var(--primary)] w-1/2" />
                    </form>
                    <div id="search-dropdown"
                        class="absolute bg-white border border-gray-300 rounded-lg shadow-md mt-1 w-3/4 hidden"></div>
                </div>

                <div class="nav-links flex items-center space-x-6">
                    <a href="/dashboard" id="home-link"
                        class="nav-link text-[var(--dark)] hover:text-[var(--primary)] px-3 py-2 rounded-md transition transform hover:scale-105 font-medium">
                        <i class="fas fa-home mr-2"></i>Home
                    </a>
                    <a href="/mentor" id="mentor-link"
                        class="nav-link text-[var(--dark)] hover:text-[var(--primary)] px-3 py-2 rounded-md transition transform hover:scale-105 font-medium">
                        <i class="fas fa-chalkboard-teacher mr-2"></i>Mentors
                    </a>
                    <a href="/project" id="projects-link"
                        class="nav-link text-[var(--dark)] hover:text-[var(--primary)] px-3 py-2 rounded-md transition transform hover:scale-105 font-medium">
                        <i class="fas fa-project-diagram mr-2"></i>Projects
                    </a>
                    <a href="/profile" id="profile-link"
                        class="nav-link text-[var(--dark)] hover:text-[var(--primary)] px-3 py-2 rounded-md transition transform hover:scale-105 font-medium">
                        <i class="fas fa-user-circle mr-2"></i>Profile
                    </a>
                    <div class="profile flex items-center space-x-4">
                        <a href="/profile" class="transition transform hover:scale-105">
                            <img src="<%= user.avatarUrl %>" alt="User Avatar" class="w-10 h-10 rounded-full">
                        </a>
                        <div class="relative group">
                            <button
                                class="text-[var(--dark)] hover:text-[var(--primary)] transition font-medium">Account</button>
                            <div
                                class="absolute hidden group-hover:block right-0 mt-2 w-48 bg-white border rounded-md shadow-lg py-2 group-focus-within:block">
                                <a href="/settings"
                                    class="block px-4 py-2 text-sm text-[var(--dark)] hover:text-[var(--primary)] font-medium">Settings</a>
                                <a href="/logout"
                                    class="block px-4 py-2 text-sm text-[var(--dark)] hover:text-[var(--primary)] font-medium">Logout</a>
                            </div>
                        </div>
                    </div>
                </div>
        </div>
    </nav>

    <% if (!user.role) { %>
        <div id="roleModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-white rounded-lg shadow-lg w-1/3 p-6">
                <h2 class="text-xl font-bold text-gray-700 text-center mb-4">Select Your Role</h2>
                <p class="text-gray-600 text-center mb-6">
                    Please select your role to continue. This will help us customize your experience.
                </p>
                <div class="flex justify-around">
                    <button onclick="selectRole('Student')"
                        class="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600">
                        I am a Student
                    </button>
                    <button onclick="selectRole('Teacher')"
                        class="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600">
                        I am a Teacher
                    </button>
                </div>
            </div>
        </div>

        <script>
            async function selectRole(role) {
                try {
                    const response = await fetch('/select-role', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ role }),
                    });
                    if (response.ok) {
                        // Hide modal and reload page
                        document.getElementById('roleModal').style.display = 'none';
                        window.location.reload();
                    } else {
                        alert('Failed to set your role. Please try again.');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('An error occurred. Please try again later.');
                }
            }
        </script>
        <% } %>
            <div class="flex flex-col h-screen">
                <div
                    class="absolute top-16 left-0 w-16 bg-white border-r border-gray-200 h-[calc(100vh-4rem)] flex flex-col items-center py-3 space-y-2 overflow-y-auto">
                    <button
                        class="bg-blue-500 rounded-full w-12 h-12 flex items-center justify-center cursor-pointer hover:bg-blue-600 fas fa-inbox text-white"
                        onclick="window.location.href='/dashboard'"></button>
                    <div class="w-[50px] bg-gray-400 my-2 h-[2px]"></div>

                    <div id="groupSection" class="w-full flex flex-col items-center space-y-2">
                        <% groups.forEach(group=> { %>
                            <div class="group-item w-12 h-12 bg-gray-100 rounded-full hover:rounded-2xl transition-all cursor-pointer"
                                data-group-id="<%= group.id %>" onclick="loadGroup('<%= group.id %>')">
                                <img src="<%= group.iconUrl || '/images/default-group.jpeg' %>" alt="<%= group.name %>"
                                    class="w-full h-full rounded-full object-cover">
                            </div>
                            <% }); %>
                                <button
                                    class="bg-blue-500 rounded-full w-12 h-12 flex items-center justify-center cursor-pointer hover:bg-blue-600 fas fa-plus text-white"
                                    onclick="window.location.href='/project'">
                                </button>
                    </div>


                </div>

                <!-- Sidebar Container -->
                <div id="sidebarContainer"
                    class="absolute top-16 left-16 w-60 bg-white border-r border-gray-200 h-[calc(100vh-4rem)] text-gray-800">
                    <!-- Friends Sidebar -->
                    <div id="friendSidebar" class="h-full">
                        <div class="p-3 border-b border-gray-200 flex items-center justify-between">
                            <div class="flex items-center space-x-2">
                                <svg x="0" y="0" class="icon_fc4f04" aria-hidden="true" role="img"
                                    xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none"
                                    viewBox="0 0 24 24">
                                    <path fill="currentColor" d="M13 10a4 4 0 1 0 0-8 4 4 0 0 0 0 8Z" class=""></path>
                                    <path fill="currentColor"
                                        d="M3 5v-.75C3 3.56 3.56 3 4.25 3s1.24.56 1.33 1.25C6.12 8.65 9.46 12 13 12h1a8 8 0 0 1 8 8 2 2 0 0 1-2 2 .21.21 0 0 1-.2-.15 7.65 7.65 0 0 0-1.32-2.3c-.15-.2-.42-.06-.39.17l.25 2c.02.15-.1.28-.25.28H9a2 2 0 0 1-2-2v-2.22c0-1.57-.67-3.05-1.53-4.37A15.85 15.85 0 0 1 3 5Z"
                                        class=""></path>
                                </svg>
                                <span>Contacts</span>
                            </div>
                        </div>
                        <div id="friendSection">
                            <% if (friends.length> 0) { %>
                                <% friends.forEach(friend=> { %>
                                    <div class="friend-item flex items-center p-2 hover:bg-gray-100 rounded-md cursor-pointer 
<%= selectedFriend === friend.email ? 'bg-gray-200' : '' %>" data-id="<%= friend.email %>"
                                        onclick="loadDirectMessages('<%= friend.email %>')">
                                        <div class="relative">
                                            <img src="<%= friend.avatarUrl %>" alt="<%= friend.name %>"
                                                class="w-8 h-8 rounded-full mr-3">
                                            <span class="absolute bottom-0 right-0 w-3 h-3 rounded-full 
            <%= friend.online ? 'bg-green-500' : 'bg-gray-400' %> border-2 border-white"></span>
                                        </div>
                                        <span>
                                            <%= friend.name %>
                                        </span>
                                    </div>
                                    <% }); %>
                                        <% } else { %>
                                            <p class="text-gray-500 text-sm">No Contacts found</p>
                                            <% } %>
                        </div>
                    </div>

                    <div id="channelSidebar" class="hidden h-full">
                        <div id="channelHeader" class="p-3 border-b border-gray-200">
                            <div class="flex items-center space-x-4">
                                <div>
                                    <h3 id="groupName" class="text-lg font-bold">Group Name</h3>
                                    <p id="groupDescription" class="text-sm text-gray-500">Group Description</p>
                                </div>
                            </div>
                        </div>

                        <hr>

                        <div class="flex justify-between mt-4">
                            <!-- Button to add a channel (smaller size) -->
                            <button id="addChannelButton"
                                class="bg-blue-500 text-white px-3 py-1 rounded-md text-sm hover:bg-blue-600">
                                Add a Channel
                            </button>

                            <button id="sendInvitationButton"
                                class="bg-green-500 text-white px-3 py-1 rounded-md text-sm hover:bg-green-600">
                                Send Invitation
                            </button>
                        </div>

                        <!-- Modal for adding a channel -->
                        <div id="addChannelModal"
                            class="hidden fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center">
                            <div class="bg-white p-6 rounded-md w-96">
                                <h3 class="text-lg font-semibold mb-4">Add a New Channel</h3>
                                <input type="text" id="channelNameInput" class="w-full p-2 border rounded-md mb-4"
                                    placeholder="Channel Name">
                                <div class="flex justify-end space-x-2">
                                    <button id="cancelChannelButton"
                                        class="bg-gray-300 text-gray-700 px-4 py-2 rounded-md">Cancel</button>
                                    <button id="submitChannelButton"
                                        class="bg-blue-500 text-white px-4 py-2 rounded-md">Add Channel</button>
                                </div>
                            </div>
                        </div>

                        <div id="sendInvitationModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
                            <div class="bg-white p-6 rounded-lg w-96 max-w-sm shadow-lg">
                                <h3 class="text-2xl font-semibold mb-6 text-center text-gray-800">Send Invitation</h3>
                                <p class="text-gray-600 text-sm mb-4">Select a friend to send an invitation:</p>
                                <ul id="friendList" class="space-y-3">
                                    <% friends.forEach(friend => { %>
                                        <li class="flex justify-between items-center p-3 bg-gray-100 rounded-lg shadow-sm hover:bg-gray-200 transition ease-in-out" data-email="<%= friend.email %>">
                                            <span class="text-gray-700 font-medium"><%= friend.name %></span>
                                            <button
                                                class="bg-green-600 text-white px-3 py-2 text-sm rounded-md hover:bg-green-700 transition duration-200"
                                                onclick="sendInvitation(this)"
                                            >
                                                Send Invitation
                                            </button>
                                        </li>                                        
                                    <% }); %>
                                </ul> 
                                <div class="flex justify-end space-x-4 mt-6">
                                    <button id="cancelInvitationButton" class="bg-gray-300 text-gray-700 px-5 py-2 rounded-lg text-sm hover:bg-gray-400 transition" onclick="closeModal()">Cancel</button>
                                </div>
                            </div>
                        </div>
                        
                        <hr>

                        <div id="channelSection" class="p-3">
                            <!-- Channel data will be populated dynamically -->
                        </div>
                    </div>
                </div>

                <!-- Main Content -->
                <div id="mainContent"
                    class="flex-1 ml-[300px] mt-16 h-[calc(100vh-4rem)] flex flex-col overflow-y-auto">
                    <div class="w-full bg-white p-6 border-b border-gray-300 flex justify-between items-center">
                        <h2 class="text-2xl font-bold mb-4 text-[#2563eb]">Welcome, <%= user.name %>!</h2>
                        <div class="flex items-center space-x-3">
                            <button onclick="window.location.href= '/groups'"
                                class="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition">
                                <i class="fas fa-plus mr-2"></i>Create Project
                            </button>
                            <button onclick="window.location.href='/recommendations-page'"
                                class="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 transition">
                                <i class="fas fa-handshake mr-2"></i>Find Collaborators
                            </button>
                        </div>
                    </div>

                    <!-- Professional Chat/Collaboration Space -->
                    <div class="p-6">
                        <div class="grid grid-cols-3 gap-6">
                            <!-- Active Projects Column -->
                            <div class="bg-white shadow rounded-lg p-4">
                                <h3 class="text-lg font-semibold mb-4 text-blue-600">
                                    <i class="fas fa-project-diagram mr-2"></i>Active Projects
                                </h3>
                                <div class="space-y-3">
                                    <div class="bg-gray-300 p-3 rounded-md">
                                        <div class="flex justify-between items-center mb-2">
                                            <h4 class="font-medium">AI Ethics Framework</h4>
                                            <span
                                                class="text-xs bg-yellow-200 text-yellow-800 px-2 py-1 rounded-full">In
                                                Progress</span>
                                        </div>
                                        <div class="flex items-center">
                                            <div class="flex -space-x-2 mr-2">
                                                <img src="https://randomuser.me/api/portraits/men/1.jpg"
                                                    alt="Team Member"
                                                    class="w-6 h-6 rounded-full border-2 border-white">
                                                <img src="https://randomuser.me/api/portraits/women/2.jpg"
                                                    alt="Team Member"
                                                    class="w-6 h-6 rounded-full border-2 border-white">
                                                <img src="https://randomuser.me/api/portraits/men/3.jpg"
                                                    alt="Team Member"
                                                    class="w-6 h-6 rounded-full border-2 border-white">
                                            </div>
                                            <span class="text-xs text-gray-600">3 collaborators</span>
                                        </div>
                                    </div>
                                    <div class="bg-gray-300 p-3 rounded-md">
                                        <div class="flex justify-between items-center mb-2">
                                            <h4 class="font-medium">Sustainable Tech Solutions</h4>
                                            <span
                                                class="text-xs bg-green-200 text-green-800 px-2 py-1 rounded-full">Ongoing</span>
                                        </div>
                                        <div class="flex items-center">
                                            <div class="flex -space-x-2 mr-2">
                                                <img src="https://randomuser.me/api/portraits/women/4.jpg"
                                                    alt="Team Member"
                                                    class="w-6 h-6 rounded-full border-2 border-white">
                                                <img src="https://randomuser.me/api/portraits/men/5.jpg"
                                                    alt="Team Member"
                                                    class="w-6 h-6 rounded-full border-2 border-white">
                                            </div>
                                            <span class="text-xs text-gray-600">2 collaborators</span>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Knowledge Sharing Column -->
                            <div class="bg-white shadow rounded-lg p-4">
                                <h3 class="text-lg font-semibold mb-4 text-blue-600">
                                    <i class="fas fa-lightbulb mr-2"></i>Knowledge Sharing
                                </h3>
                                <div class="space-y-3">
                                    <div class="bg-gray-300 p-3 rounded-md">
                                        <h4 class="font-medium mb-2">Upcoming Webinar</h4>
                                        <p class="text-sm text-gray-700">AI Ethics and Responsible Innovation</p>
                                        <div class="mt-2 flex justify-between items-center">
                                            <span class="text-xs bg-blue-200 text-blue-800 px-2 py-1 rounded-full">Next
                                                Week</span>
                                            <button class="text-blue-600 text-xs hover:underline">Register</button>
                                        </div>
                                    </div>
                                    <div class="bg-gray-300 p-3 rounded-md">
                                        <h4 class="font-medium mb-2">Latest Research Paper</h4>
                                        <p class="text-sm text-gray-700">Breakthrough in Quantum Computing Algorithms
                                        </p>
                                        <div class="mt-2 flex justify-between items-center">
                                            <span
                                                class="text-xs bg-green-200 text-green-800 px-2 py-1 rounded-full">New</span>
                                            <button class="text-blue-600 text-xs hover:underline">View</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <section id="discordChat" class="bg-white rounded-lg shadow-lg p-4 my-6">
                        <div class="flex">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
                                class="w-12 h-12 text-blue-500 hover:text-green-500 transform hover:scale-110 transition-all duration-300">
                                <circle cx="12" cy="12" r="10" class="fill-current opacity-20" />
                                <path
                                    d="M12 4a8 8 0 00-8 8c0 2 .7 3.9 1.9 5.4l1.4-1.4A5.98 5.98 0 016 12a6 6 0 0112 0c0 1.6-.6 3-1.6 4l1.5 1.5A8 8 0 0012 4z"
                                    class="fill-current" />
                                <path d="M15.5 12a3.5 3.5 0 11-7 0 3.5 3.5 0 017 0z" class="fill-current opacity-80" />
                                <circle cx="12" cy="12" r="2" class="fill-current text-white opacity-100" />
                            </svg>
                            <h2 class="text-xl font-bold mb-4 text-[var(--primary)] relative top-2">Tech Innovations
                                Lounge</h2>
                        </div>
                        <!-- Chat Messages -->
                        <div class="flex-1 overflow-y-auto p-4 bg-gray-300 space-y-4" id="chatMessages">
                            <!-- Initial Chat Messages -->
                            <div class="flex flex-col space-y-4">
                                <div class="flex items-start space-x-3">
                                    <img src="https://randomuser.me/api/portraits/men/1.jpg" alt="Student1"
                                        class="w-10 h-10 rounded-full">
                                    <div class="flex-1">
                                        <div class="flex items-center space-x-2 mb-1">
                                            <span class="font-semibold text-blue-600">@Student1</span>
                                            <span class="text-xs text-gray-500">10:15 AM</span>
                                        </div>
                                        <div class="chat-message received-message rounded-lg p-3 shadow-sm bg-white">
                                            Hey everyone! Is anyone working on emerging tech trends for our research
                                            project? I'm particularly interested in how AI and machine learning are
                                            transforming different industries.
                                        </div>
                                    </div>
                                </div>

                                <div class="flex items-start space-x-3">
                                    <img src="https://randomuser.me/api/portraits/women/2.jpg" alt="Student2"
                                        class="w-10 h-10 rounded-full">
                                    <div class="flex-1">
                                        <div class="flex items-center space-x-2 mb-1">
                                            <span class="font-semibold text-green-600">@Student2</span>
                                            <span class="text-xs text-gray-500">10:17 AM</span>
                                        </div>
                                        <div class="chat-message received-message rounded-lg p-3 shadow-sm bg-white">
                                            I'm interested in exploring AI's impact on sustainable technologies. Anyone
                                            want
                                            to collaborate on a research paper about how machine learning can optimize
                                            renewable energy systems?
                                        </div>
                                    </div>
                                </div>

                                <div class="flex items-start space-x-3">
                                    <img src="https://randomuser.me/api/portraits/men/3.jpg" alt="Student3"
                                        class="w-10 h-10 rounded-full">
                                    <div class="flex-1">
                                        <div class="flex items-center space-x-2 mb-1">
                                            <span class="font-semibold text-purple-600">@Student3</span>
                                            <span class="text-xs text-gray-500">10:20 AM</span>
                                        </div>
                                        <div class="chat-message received-message rounded-lg p-3 shadow-sm bg-white">
                                            Quantum computing looks fascinating. Has anyone done research in this area?
                                            I'm
                                            particularly curious about quantum algorithms and their potential to solve
                                            complex computational problems.
                                        </div>
                                    </div>
                                </div>

                                <div class="flex items-start space-x-3">
                                    <img src="https://randomuser.me/api/portraits/women/4.jpg" alt="Student4"
                                        class="w-10 h-10 rounded-full">
                                    <div class="flex-1">
                                        <div class="flex items-center space-x-2 mb-1">
                                            <span class="font-semibold text-red-600">@Student4</span>
                                            <span class="text-xs text-gray-500">10:22 AM</span>
                                        </div>
                                        <div class="chat-message received-message rounded-lg p-3 shadow-sm bg-white">
                                            @Student3 I've been reading about quantum computing for a research project.
                                            IBM
                                            and Google are making significant strides in developing quantum processors.
                                            Would you like to share some resources?
                                        </div>
                                    </div>
                                </div>

                                <div class="flex items-start space-x-3">
                                    <img src="https://randomuser.me/api/portraits/men/5.jpg" alt="Student5"
                                        class="w-10 h-10 rounded-full">
                                    <div class="flex-1">
                                        <div class="flex items-center space-x-2 mb-1">
                                            <span class="font-semibold text-indigo-600">@Student5</span>
                                            <span class="text-xs text-gray-500">10:25 AM</span>
                                        </div>
                                        <div class="chat-message received-message rounded-lg p-3 shadow-sm bg-white">
                                            This discussion is getting interesting! @Student2, your idea about AI in
                                            sustainable technologies sounds promising. Would love to hear more about
                                            potential research directions.
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Message Input in dashboard-->
                        <div class="bg-white border-t p-4">
                            <div class="flex items-center space-x-2">
                                <button class="text-gray-500 hover:text-gray-700">
                                    <i class="fas fa-smile text-xl"></i>
                                </button>
                                <button class="text-gray-500 hover:text-gray-700">
                                    <i class="fas fa-paperclip text-xl"></i>
                                </button>
                                <div class="flex-1">
                                    <input type="text" id="messageInput" placeholder="Type your message"
                                        class="w-full p-2 bg-gray-100 rounded-full focus:outline-none focus:ring-2 focus:ring-[var(--primary)]">
                                </div>
                                <button id="sendButton"
                                    class="bg-[var(--primary)] text-white w-10 h-10 rounded-full flex items-center justify-center hover:bg-opacity-90">
                                    <i class="fas fa-paper-plane"></i>
                                </button>
                            </div>
                        </div>
                </div>
                </section>
            </div>
            </div>
            </div>
            </div>

            <script>
                window.addEventListener('DOMContentLoaded', () => {
                    updateDashboard(); // Updates the counter as soon as the page loads
                });

                setInterval(() => {
                    updateDashboard();
                }, 60000); // Updates every 60 seconds

                let currentGroupId = null;
                document.getElementById('search-input').addEventListener('input', async function () {
                    const query = this.value.trim();
                    const dropdown = document.getElementById('search-dropdown');

                    if (!query) {
                        dropdown.innerHTML = '';
                        dropdown.style.display = 'none';
                        return;
                    }

                    try {
                        const response = await fetch(`/search?query=${encodeURIComponent(query)}`);
                        const users = await response.json();

                        dropdown.innerHTML = users.map(user => `
                            <a href="${user.profileUrl}" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center">
                                <img src="${user.avatarUrl}" alt="Avatar" class="w-8 h-8 rounded-full mr-3">
                                <span>${user.name} (${user.email})</span>
                            </a>
                        `).join('');

                        dropdown.style.display = 'block';
                    } catch (error) {
                        console.error('Error fetching search results:', error);
                        dropdown.innerHTML = '<p class="px-4 py-2 text-sm text-red-500">Failed to load results</p>';
                        dropdown.style.display = 'block';
                    }
                });

                function toggleRequestsDropdown(event) {
                    event.preventDefault(); // Prevent default link behavior if clicked.

                    // Ensure correct elements are targeted.
                    const dropdown = document.getElementById('requestsDropdown');
                    const envelopeIcon = event.currentTarget.querySelector('i'); // Use the clicked element.

                    // Toggle visibility of the dropdown
                    const isHidden = dropdown.classList.toggle('hidden');

                    // Update the envelope icon
                    envelopeIcon.classList.toggle('fa-envelope', isHidden);
                    envelopeIcon.classList.toggle('fa-envelope-open', !isHidden);

                    if (!isHidden) {
                        // Update the dashboard when the dropdown becomes visible
                        updateDashboard();

                        // Add a one-time click listener to close the dropdown when clicking outside
                        const outsideClickListener = (event) => {
                            const isClickInside = dropdown.contains(event.target) || envelopeIcon.contains(event.target);

                            if (!isClickInside) {
                                dropdown.classList.add('hidden');
                                envelopeIcon.classList.add('fa-envelope');
                                envelopeIcon.classList.remove('fa-envelope-open');
                                document.removeEventListener('click', outsideClickListener); // Remove the listener
                            }
                        };

                        document.addEventListener('click', outsideClickListener);
                    }
                }


                document.addEventListener('click', function (event) {
                    const dropdown = document.getElementById('requestsDropdown');
                    const envelopeIcon = event.target.closest('a[onclick="toggleRequestsDropdown(event)"]');

                    // Close dropdown if click is outside both the dropdown and the envelope icon
                    if (!dropdown.contains(event.target) && !envelopeIcon) {
                        dropdown.classList.add('hidden');

                        // Reset the envelope icon state
                        const icon = document.querySelector('a[onclick="toggleRequestsDropdown(event)"] i');
                        if (icon) {
                            icon.classList.add('fa-envelope');
                            icon.classList.remove('fa-envelope-open');
                        }
                    }
                });

                async function updateDashboard() {
                    try {
                        // Fetch updated friend requests, group invitations, and join requests
                        const [friendRequests, groupInvitations, joinRequests] = await Promise.all([
                            fetch("/friend-requests").then(res => res.json()),
                            fetch("/group-invitations").then(res => res.json()),
                            fetch("/join-requests").then(res => res.json()),
                        ]);

                        // Update the dropdown content
                        const requestsDropdown = document.getElementById("requestsDropdown");

                        const friendRequestsHTML = friendRequests.length > 0
                            ? friendRequests.map(req => `
                                <li class="flex items-center justify-between p-4 border-b hover:bg-gray-50 transition-colors">
                                    <div class="flex items-center">
                                        <img src="${req.avatarUrl}" alt="${req.name}" class="w-10 h-10 rounded-full mr-4 object-cover">
                                        <div>
                                            <span class="font-medium text-gray-800">${req.name}</span>
                                            <p class="text-xs text-gray-500">Wants to connect</p>
                                        </div>
                                    </div>
                                    <div class="flex space-x-2">
                                        <button onclick="handleRequest('${req.email}', 'ACCEPT')"
                                            class="bg-green-500 text-white px-3 py-1.5 rounded-md text-sm hover:bg-green-600">Accept</button>
                                        <button onclick="handleRequest('${req.email}', 'REJECT')"
                                            class="bg-red-500 text-white px-3 py-1.5 rounded-md text-sm hover:bg-red-600">Reject</button>
                                    </div>
                                </li>
                            `).join("")
                            : `<li class="px-4 py-2 text-sm text-gray-500">No pending friend requests</li>`;

                        const groupInvitationsHTML = groupInvitations.length > 0
                            ? groupInvitations.map(invitation => `
                                <li class="flex items-center justify-between p-4 border-b hover:bg-gray-50 transition-colors">
                                    <div>
                                        <span class="font-medium">${invitation.groupName}</span>
                                    </div>
                                    <div class="flex space-x-2">
                                        <button onclick="handleInvitation('${invitation.groupId}', 'accept')"
                                            class="bg-green-500 text-white px-3 py-1.5 rounded-md text-sm hover:bg-green-600">Accept</button>
                                        <button onclick="handleInvitation('${invitation.groupId}', 'reject')"
                                            class="bg-red-500 text-white px-3 py-1.5 rounded-md text-sm hover:bg-red-600">Reject</button>
                                    </div>
                                </li>
                            `).join("")
                            : `<li class="px-4 py-2 text-sm text-gray-500">No group invitations</li>`;

                        const groupJoinRequestsHTML = joinRequests.length > 0
                            ? joinRequests.map(req => `
                                <li class="flex items-center justify-between p-4 border-b hover:bg-gray-50 transition-colors">
                                    <div>
                                        <span class="font-medium">${req.userName}</span>
                                        <p class="text-xs text-gray-500">Requested to join ${req.groupName}</p>
                                    </div>
                                    <div class="flex space-x-2">
                                        <button onclick="handleGroupRequest('${req.userEmail}', '${req.groupId}', 'accept')"
                                            class="bg-green-500 text-white px-3 py-1.5 rounded-md text-sm hover:bg-green-600">Accept</button>
                                        <button onclick="handleGroupRequest('${req.userEmail}', '${req.groupId}', 'reject')"
                                            class="bg-red-500 text-white px-3 py-1.5 rounded-md text-sm hover:bg-red-600">Reject</button>
                                    </div>
                                </li>
                            `).join("")
                            : `<li class="px-4 py-2 text-sm text-gray-500">No group join requests</li>`;

                        requestsDropdown.innerHTML = `
                            <li class="sticky top-0 bg-gray-100 font-bold text-lg px-4 py-2 border-b border-gray-300">
                                Friend Requests
                            </li>
                            ${friendRequestsHTML}
                            <li class="sticky top-0 bg-gray-100 font-bold text-lg px-4 py-2 border-b border-gray-300 mt-2">
                                Group Invitations
                            </li>
                            ${groupInvitationsHTML}
                            <li class="sticky top-0 bg-gray-100 font-bold text-lg px-4 py-2 border-b border-gray-300 mt-2">
                                Group Join Requests
                            </li>
                            ${groupJoinRequestsHTML}
                        `;

                        // Update the notification badge
                        const totalInvites = friendRequests.length + groupInvitations.length + joinRequests.length;
                        const notificationBadge = document.getElementById("notificationBadge");

                        if (totalInvites > 0) {
                            notificationBadge.textContent = totalInvites;
                            notificationBadge.classList.remove("hidden");
                        } else {
                            notificationBadge.classList.add("hidden");
                        }
                    } catch (error) {
                        console.error("Error updating dashboard:", error);
                    }
                }

                async function handleRequest(email, action) {
                    try {
                        const response = await fetch("/handle-request", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({ requesterEmail: email, action }),
                        });

                        const result = await response.json();

                        if (result.success) {
                            alert(`Request ${action.toLowerCase()}ed successfully!`);
                            updateDashboard(); // Ensure this function is defined
                            window.location.reload();
                        } else {
                            alert(`Error: ${result.message}`);
                        }
                    } catch (error) {
                        console.error("Error handling request:", error);
                        alert("An error occurred. Please try again later.");
                    }
                }

                let selectedFriend = null;
                async function loadDirectMessages(friendEmail) {
                    const mainContent = document.querySelector('.flex-1');
                    mainContent.innerHTML = `
                        <div class="flex justify-center items-center h-full">
                            <div class="animate-spin rounded-full h-12 w-12 border-t-4 border-blue-500"></div>
                        </div>
                    `; // Loading spinner

                    try {
                        // Fetch initial messages and render the chat
                        const response = await fetch(`/messages/${friendEmail}`);
                        if (!response.ok) throw new Error('Failed to load messages');

                        const html = await response.text();
                        mainContent.innerHTML = html;

                        // Highlight the selected friend
                        document.querySelectorAll('.friend-item').forEach(el => el.classList.remove('bg-gray-200'));
                        document.querySelector(`[data-id="${friendEmail}"]`)?.classList.add('bg-gray-200');

                        // Join a unique Socket.IO room for real-time updates with this friend
                        socket.emit('join-room', { friendEmail });
                    } catch (error) {
                        console.error('Error loading messages:', error);
                        mainContent.innerHTML = '<p>Error loading messages. Please try again later.</p>';
                    }
                }

                async function sendMessage(event, friendEmail) {
                    event.preventDefault(); // Prevent page reload
                    const messageInput = document.getElementById('messageInput');
                    const message = messageInput.value.trim();

                    if (!message) return;

                    const chatBox = document.getElementById('chatBox'); // Correctly target the chat container
                    const timestamp = new Date();

                    // Optimistically add the message to the chat UI
                    const newMessageHTML = `
                        <div class="flex items-start space-x-3 mb-4">
                            <img src="<%= user.avatarUrl %>" alt="<%= user.name %>" class="w-10 h-10 rounded-full">
                            <div>
                                <div class="flex items-center space-x-2">
                                    <span class="font-semibold text-blue-600"><%= user.name %></span>
                                    <span class="text-xs text-gray-500">${timestamp.toLocaleTimeString()}</span>
                                </div>
                                <div class="bg-white rounded-lg p-3 shadow-sm">${message}</div>
                            </div>
                        </div>
                    `;

                    chatBox.insertAdjacentHTML('beforeend', newMessageHTML); // Append message properly

                    // Scroll to the bottom
                    chatBox.scrollTop = chatBox.scrollHeight;

                    // Clear the input field
                    messageInput.value = '';

                    // Send the message to the server
                    try {
                        const response = await fetch('/send-message', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ friendId: friendEmail, message }),
                        });

                        if (!response.ok) {
                            console.error('Error sending message:', await response.text());
                            alert('Failed to send the message. Please try again.');

                            // Optionally, remove the optimistic message if the server fails
                            chatBox.lastElementChild.remove();
                        }
                    } catch (error) {
                        console.error('Error sending message:', error);
                        alert('An error occurred. Please try again later.');

                        // Optionally, remove the optimistic message if an error occurs
                        chatBox.lastElementChild.remove();
                    }
                }

                async function removeFriend(friendEmail) {
                    if (!confirm("Are you sure you want to remove this friend?")) {
                        return;
                    }

                    try {
                        const response = await fetch('/remove-friend', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ friendEmail }),
                        });

                        const result = await response.json();

                        if (result.success) {
                            alert("Friend removed successfully.");
                            // Reload or redirect to dashboard
                            window.location.href = '/dashboard';
                        } else {
                            alert("Failed to remove friend: " + result.message);
                        }
                    } catch (error) {
                        console.error("Error removing friend:", error);
                        alert("An error occurred while removing the friend.");
                    }
                }

                const socket = io();

                // Notify server when the user goes online
                socket.emit("user-online", "<%= user.email %>");

                // Update friend status in the sidebar
                socket.on("friend-status", (data) => {
                    const { email, online, lastSeen } = data;
                    const friendItem = document.querySelector(`[data-id="${email}"]`);
                    if (friendItem) {
                        const statusIndicator = friendItem.querySelector('span.bg-gray-400, span.bg-green-500');
                        if (statusIndicator) {
                            statusIndicator.classList.remove('bg-gray-400', 'bg-green-500');
                            statusIndicator.classList.add(online ? 'bg-green-500' : 'bg-gray-400');
                        }

                        // Update last seen tooltip if offline
                        if (!online) {
                            friendItem.setAttribute("title", `Last seen: ${new Date(lastSeen).toLocaleString()}`);
                        }
                    }

                    const customEvent = new CustomEvent('update-sub-navbar', { detail: { email, online, lastSeen } });
                    window.dispatchEvent(customEvent);
                });

                async function joinGroup(groupId) {
                    try {
                        const response = await fetch(`/group/${groupId}/join`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                        });

                        if (response.ok) {
                            alert('Successfully joined the group!');
                            location.reload();
                        } else {
                            alert('Failed to join the group. Please try again.');
                        }
                    } catch (error) {
                        console.error('Error joining group:', error);
                        alert('An error occurred. Please try again later.');
                    }
                }

                async function handleGroupRequest(userEmail, groupId, action) {
                    try {
                        const response = await fetch(`/group/${groupId}/handle-request`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ collaboratorEmail: userEmail, action })
                        });

                        if (response.ok) {
                            alert(`Request ${action}ed successfully!`);
                            window.location.reload();
                        } else {
                            alert('Failed to handle the request. Please try again.');
                        }
                    } catch (error) {
                        console.error('Error handling group request:', error);
                        alert('An error occurred. Please try again later.');
                    }
                }

                async function loadGroup(groupId) {
                    const friendSidebar = document.getElementById('friendSidebar');
                    const channelSidebar = document.getElementById('channelSidebar');

                    friendSidebar.classList.add('hidden');
                    channelSidebar.classList.remove('hidden');

                    const mainContent = document.getElementById('mainContent');
                    const groupNameElement = document.getElementById('groupName');
                    const groupDescriptionElement = document.getElementById('groupDescription');
                    const channelSection = document.getElementById('channelSection');

                    // Highlight the selected group
                    document.querySelectorAll('.group-item').forEach(group => group.classList.remove('selected'));
                    document.querySelector(`[data-group-id="${groupId}"]`).classList.add('selected');

                    mainContent.innerHTML = `
                        <div class="flex justify-center items-center h-full">
                            <div class="animate-spin rounded-full h-12 w-12 border-t-4 border-blue-500"></div>
                        </div>
                    `;

                    try {
                        const metadataResponse = await fetch(`/group/${groupId}/metadata`);
                        if (!metadataResponse.ok) throw new Error('Failed to fetch group metadata');
                        const group = await metadataResponse.json();

                        groupNameElement.innerText = group.name || "Unnamed Group";
                        groupDescriptionElement.innerText = group.description || "No description available";

                        const groupResponse = await fetch(`/group/${groupId}/view`);
                        if (!groupResponse.ok) throw new Error('Failed to load group view');
                        mainContent.innerHTML = await groupResponse.text();

                        const channelsResponse = await fetch(`/group/${groupId}/channels`);
                        const { channels } = await channelsResponse.json();
                        channelSection.innerHTML = channels.length
                            ? channels.map(channel => `
                            <div onclick="loadChannelMessages('${channel.id}', '${channel.name}')"
                                class="cursor-pointer p-2 hover:bg-gray-200 rounded-md">
                                # ${channel.name}
                            </div>
                        `).join("")
                            : "<p class='text-sm text-gray-500'>No channels available for this group.</p>";

                        // Update the global groupId variable
                        currentGroupId = groupId;
                    } catch (error) {
                        console.error('Error loading group:', error);
                        mainContent.innerHTML = `
                            <p class="text-center text-gray-500">Failed to load group. Please try again later.</p>
                        `;
                    }
                }

                async function loadChannelMessages(channelId, channelName) {
                    currentChannelId = channelId;

                    const chatBox = document.getElementById("groupChatBox");
                    document.getElementById("groupHeader").innerText = `# ${channelName}`; // Update header title

                    chatBox.innerHTML = `
                        <div class="flex justify-center items-center h-full">
                            <div class="animate-spin rounded-full h-12 w-12 border-t-4 border-blue-500"></div>
                        </div>
                    `;

                    try {
                        const response = await fetch(`/channel/${channelId}/messages`);
                        const { messages } = await response.json();

                        chatBox.innerHTML = messages.map(message => `
                            <div class="flex items-start space-x-3 mb-4">
                                <img src="${message.senderAvatar}" alt="Avatar" class="w-10 h-10 rounded-full">
                                <div>
                                    <div class="font-semibold text-blue-600">${message.sender}</div>
                                    <div class="text-gray-700">${message.content}</div>
                                    <div class="text-xs text-gray-400">${new Date(message.timestamp).toLocaleString()}</div>
                                </div>
                            </div>
                        `).join("");
                    } catch (error) {
                        console.error("Error loading channel messages:", error);
                        chatBox.innerHTML = `<p class="text-center text-gray-500">Failed to load messages. Please try again later.</p>`;
                    }
                }

                async function sendGroupMessage(event, channelId) {
                    event.preventDefault(); // Prevent page reload
                    const messageInput = document.getElementById('messageInput');
                    const message = messageInput.value.trim();

                    if (!message) return;

                    const chatBox = document.getElementById('groupChatBox'); // The chat container
                    const timestamp = new Date();

                    // Optimistically add the message to the chat UI
                    const newMessageHTML = `
                        <div class="flex items-start space-x-3 mb-4">
                            <img src="<%= user.avatarUrl %>" alt="<%= user.name %>" class="w-10 h-10 rounded-full">
                            <div>
                                <div class="flex items-center space-x-2">
                                    <span class="font-semibold text-blue-600"><%= user.name %></span>
                                    <span class="text-xs text-gray-500">${timestamp.toLocaleTimeString()}</span>
                                </div>
                                <div class="bg-white rounded-lg p-3 shadow-sm">${message}</div>
                            </div>
                        </div>
                    `;
                    chatBox.insertAdjacentHTML('beforeend', newMessageHTML); // Add the new message

                    // Scroll to the bottom of the chat box
                    chatBox.scrollTop = chatBox.scrollHeight;

                    // Clear the message input field
                    messageInput.value = '';

                    // Send the message to the server
                    try {
                        const response = await fetch('/send-group-message', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ channelId, message })  // Send the channelId and message to the server
                        });

                        if (!response.ok) {
                            console.error('Error sending group message:', await response.text());
                            alert('Failed to send the message. Please try again.');

                            // Optionally remove the optimistic message if the server fails
                            chatBox.lastElementChild.remove();
                        }
                    } catch (error) {
                        console.error('Error sending group message:', error);
                        alert('An error occurred. Please try again later.');

                        // Optionally remove the optimistic message if an error occurs
                        chatBox.lastElementChild.remove();
                    }
                }

                // Show Add Channel Modal
                document.getElementById('addChannelButton').addEventListener('click', (event) => {
                    event.preventDefault(); // Prevent any default behavior
                    document.getElementById('addChannelModal').classList.remove('hidden'); // Show the modal
                });

                // Cancel Add Channel Modal
                document.getElementById('cancelChannelButton').addEventListener('click', () => {
                    document.getElementById('addChannelModal').classList.add('hidden'); // Hide the modal
                });

                // Submit Add Channel Form
                document.getElementById('submitChannelButton').addEventListener('click', async (event) => {
                    event.preventDefault(); // Prevent default form submission

                    const channelNameInput = document.getElementById('channelNameInput');
                    const channelName = channelNameInput.value.trim();

                    if (!channelName) {
                        alert('Channel name cannot be empty.');
                        return;
                    }

                    try {
                        const response = await fetch(`/group/${currentGroupId}/add-channel`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ channelName }),
                        });

                        const result = await response.json(); // Parse JSON response

                        if (response.ok) {
                            // Close the modal
                            document.getElementById('addChannelModal').classList.add('hidden');

                            // Clear the input field
                            document.getElementById('channelNameInput').value = '';

                            // Use loadGroup() to refresh the group content
                            loadGroup(currentGroupId);
                        } else {
                            const errorMessage = await response.text();
                            alert(errorMessage || 'Failed to add channel.');
                        }
                    } catch (error) {
                        console.error('Error adding channel:', error);
                        alert('An error occurred. Please try again.');
                    }
                });

                // Send invitation function
                async function sendInvitation(button) {
                    const friendEmail = button.parentElement.dataset.email; // Get email from data attribute
                    const friendName = button.parentElement.dataset.name; // Get name from data attribute

                    if (!friendEmail) {
                        alert('Invalid friend selected.');
                        return;
                    }

                    try {
                        const response = await fetch(`/group/${currentGroupId}/send-invitation`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ targetEmail: friendEmail }),
                        });

                        if (response.ok) {
                            alert(`Invitation sent successfully to ${friendName}!`);
                        } else {
                            const error = await response.text();
                            alert(`Failed to send invitation: ${error}`);
                        }
                    } catch (error) {
                        console.error('Error sending invitation:', error);
                        alert('An unexpected error occurred.');
                    }
                }

                document.getElementById('sendInvitationButton').addEventListener('click', () => {
                    if (!currentGroupId) {
                        alert('No group selected.');
                        return;
                    }

                    // Show the modal
                    document.getElementById('sendInvitationModal').classList.remove('hidden');
                });

                // Cancel button to hide the modal
                document.getElementById('cancelInvitationButton').addEventListener('click', () => {
                    document.getElementById('sendInvitationModal').classList.add('hidden');
                });

                async function handleInvitation(groupId, action) {
                    try {
                        const response = await fetch(`/group/${groupId}/handle-request`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ action }),
                        });

                        if (response.ok) {
                            alert(`Invitation ${action}ed successfully.`);
                            updateDashboard(); // Refresh the dashboard
                            window.location.reload();
                        } else {
                            alert('Failed to handle the invitation.');
                        }
                    } catch (error) {
                        console.error('Error handling invitation:', error);
                    }
                }
            </script>
</body>

</html>